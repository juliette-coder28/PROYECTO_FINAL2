# -*- coding: utf-8 -*-
"""exploracion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SAuteGEDNgcgVnYpVxKa3qy5dfdZ1j4M

# **NOTEBOOK DE EXPLORACION: PRECIOS DE FRUTAS Y VEGETALES**

#**Definición del Problema: Análisis de Precios de Frutas y Vegetales**
###**1. Contexto del Problema**

En el contexto actual de la agricultura y la comercialización de productos frescos, los precios de frutas y vegetales pueden variar significativamente debido a diversos factores como la estacionalidad, la oferta y la demanda, y las condiciones climáticas. Los datos proporcionados incluyen información sobre los precios de venta al por menor de frutas y vegetales, lo que es crucial para los actores en la cadena de suministro, incluyendo agricultores, distribuidores y minoristas.

###**2. Características Principales**


*   Datos Disponibles:

-Frutas y Vegetales: Información sobre los nombres de frutas y vegetales.

-Precios: Precios al por menor para frutas y vegetales.



*   Objetivos del Análisis:

-Visualización de Distribución de Precios: Entender la variabilidad de los precios de frutas y vegetales.

   -Comparación de Precios Promedio: Analizar y comparar los precios promedio de diferentes frutas y vegetales.

   -Identificación de Tendencias: Detectar patrones o tendencias en los precios que puedan ayudar a tomar decisiones informadas sobre precios y abastecimiento.


###**3. Motivación/Justificación**


*   Optimización de Precios:

-Entender la distribución y los precios promedio de frutas y vegetales puede ayudar a los minoristas a ajustar sus estrategias de precios para maximizar sus márgenes de ganancia.

*   Planificación de Abastecimiento:

-Los agricultores y distribuidores pueden utilizar esta información para planificar mejor la producción y el abastecimiento, ajustando sus operaciones en función de los precios esperados.


*   Respuesta a la Variabilidad del Mercado:

-La capacidad para identificar precios inusualmente altos o bajos puede ayudar a mitigar el impacto de fluctuaciones inesperadas en los precios y tomar decisiones basadas en datos en lugar de suposiciones.

###**4. Enmarcamiento en Tipos de Problemas de Aprendizaje Automático**

Este problema se puede abordar con técnicas de análisis exploratorio de datos (EDA) y modelado predictivo. A continuación se detalla cómo se enmarca en estos tipos:

*   Análisis Exploratorio de Datos (EDA):

-Visualización de Datos: Usar gráficos para entender la distribución de precios y comparar los precios promedio de frutas y vegetales.
-Tendencias y Patrones: Identificar patrones en los datos de precios que pueden informar sobre la estacionalidad o cambios en la oferta y demanda.

*   Modelado Predictivo:

-Regresión: Utilizar técnicas de regresión para predecir precios futuros basados en factores históricos y actuales. Por ejemplo, predecir los precios de frutas o vegetales para la próxima temporada considerando tendencias pasadas.

*   Clasificación:

-Segmentación de Productos: Clasificar frutas y vegetales en categorías de precios (por ejemplo, alto, medio, bajo) para facilitar decisiones estratégicas basadas en segmentos de mercado.

# **Solucion**

# **Importar bibliotecas**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Cargar los datos**"""

# Cargar los datos desde un archivo CSV
datos = pd.read_csv('Vegetable-fruits-Prices-2022.csv', encoding='latin-1')

import pandas as pd

# Intenta con diferentes codificaciones
try:
    df = pd.read_csv("/content/Vegetable-fruits-Prices-2022 (1).csv", encoding='utf-8')
except UnicodeDecodeError:
    try:
        df = pd.read_csv('/content/Vegetable-fruits-Prices-2022 (1).csv', encoding='latin-1')
    except UnicodeDecodeError:
        df = pd.read_csv('/content/Vegetable-fruits-Prices-2022 (1).csv', encoding='iso-8859-1')

"""# **Explorar los datos**"""

print(datos.head())
print(datos.describe())
print(datos.info())

"""# **Visualizaciones**


"""

# Gráfico 1: Distribución de precios al por menor de vegetales frescos
fig1 = plt.figure()
datos_fresh_vegetables = datos[datos['Form'] == 'Fresh']
plt.hist(datos_fresh_vegetables['RetailPrice'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribución de precios de vegetales frescos')
plt.xlabel('Precio al por menor')
plt.ylabel('Frecuencia')
plt.show()

fig2 = plt.figure()
datos_fresh_fruits = datos[datos['Form.1'] == 'Fresh']
plt.hist(datos_fresh_fruits['RetailPrice.1'], bins=20, color='lightgreen', edgecolor='black')
plt.title('Distribución de precios de frutas frescas')
plt.xlabel('Precio al por menor')
plt.ylabel('Frecuencia')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(data=datos, x='Form', y='RetailPrice', estimator=np.mean, ci=None)
plt.title('Precios Promedio por Tipo (Frutas vs Vegetales)')
plt.xlabel('Tipo')
plt.ylabel('Precio Promedio')
plt.show()

fig3 = plt.figure()
datos_canned_vegetables = datos[datos['Form'] == 'Canned']
plt.hist([datos_fresh_vegetables['Yield'], datos_canned_vegetables['Yield']],
         bins=10, label=['Fresco', 'Enlatado'], color=['orange', 'purple'], edgecolor='black')
plt.title('Comparación de rendimientos de vegetales frescos vs enlatados')
plt.xlabel('Rendimiento')
plt.ylabel('Frecuencia')
plt.legend()
plt.show()

fig4 = plt.figure()
plt.scatter(datos['CupEquivalentSize'], datos['CupEquivalentPrice'], color='red')
plt.title('Tamaño de taza vs Precio equivalente en vegetales')
plt.xlabel('Tamaño de taza')
plt.ylabel('Precio equivalente')

fig5 = plt.figure()
datos.boxplot(column='RetailPrice', by='Form', grid=False)
plt.title('Boxplot de precios al por menor de vegetales por forma')
plt.suptitle('')
plt.xlabel('Forma')
plt.ylabel('Precio al por menor')
plt.show()

fig6 = plt.figure()
datos.boxplot(column='RetailPrice.1', by='Form.1', grid=False)
plt.title('Boxplot de precios al por menor de frutas por forma')
plt.suptitle('')
plt.xlabel('Forma')
plt.ylabel('Precio al por menor')
plt.show()

fig7 = plt.figure()
plt.hist([datos['Yield'], datos['Yield.1']], bins=15, label=['Vegetales', 'Frutas'], color=['blue', 'green'], edgecolor='black')
plt.title('Histograma de rendimiento de vegetales y frutas')
plt.xlabel('Rendimiento')
plt.ylabel('Frecuencia')
plt.legend()
plt.show()

fig8 = plt.figure()
plt.scatter(datos['CupEquivalentSize'], datos['Yield'], color='orange')
plt.title('Tamaño de taza vs Rendimiento en vegetales')
plt.xlabel('Tamaño de taza')
plt.ylabel('Rendimiento')
plt.show()

fig9 = plt.figure()
datos_grouped = datos.groupby('Form')['RetailPrice'].mean()
datos_grouped.plot(kind='bar', color=['cyan', 'magenta'])
plt.title('Comparación de precios de vegetales frescos vs enlatados')
plt.xlabel('Forma')
plt.ylabel('Precio medio al por menor')
plt.show()

fig10 = plt.figure()
datos_grouped_fruits = datos.groupby('Form.1')['RetailPrice.1'].mean()
datos_grouped_fruits.plot(kind='bar', color=['yellow', 'green'])
plt.title('Comparación de precios de frutas frescas vs enlatadas')
plt.xlabel('Forma')
plt.ylabel('Precio medio al por menor')
plt.show()

plt.figure(figsize=(14, 7))

# Usa Seaborn para una mejor visualización
sns.lineplot(data=datos, x='Vegetable', y='RetailPrice', marker='o')

# Configura las etiquetas y el título de la gráfica
plt.xlabel('Vegetal')
plt.ylabel('Precio al por menor')
plt.title('Tendencia de precios de vegetales')

# Rotar las etiquetas del eje x para que se vean mejor
plt.xticks(rotation=70, ha='right')

# Ajusta los márgenes para que las etiquetas no se superpongan
plt.tight_layout()

# Muestra la gráfica
plt.show()

top_10_expensive = df.sort_values(by='RetailPriceVegetable', ascending=False).head(10)

# Configura el tamaño de la gráfica
plt.figure(figsize=(12, 6))

# Usa Seaborn para una mejor visualización
sns.barplot(data=top_10_expensive, x='Vegetable', y='RetailPriceVegetable', palette='viridis')

# Configura las etiquetas y el título de la gráfica
plt.xlabel('Vegetal')
plt.ylabel('Precio al por menor')
plt.title('Top 10 vegetales más caros')

# Rotar las etiquetas del eje x para que se vean mejor
plt.xticks(rotation=45, ha='right')

# Ajusta los márgenes para que las etiquetas no se superpongan
plt.tight_layout()

# Muestra la gráfica
plt.show()

plt.figure(figsize=(14, 7))

# Usa Seaborn para una mejor visualización
sns.lineplot(data=df, x='Fruit', y='RetailPriceFruits', marker='o')

# Configura las etiquetas y el título de la gráfica
plt.xlabel('Fruta')
plt.ylabel('Precio al por menor')
plt.title('Tendencia de precios de frutas')

# Rotar las etiquetas del eje x para que se vean mejor
plt.xticks(rotation=70, ha='right')

# Ajusta los márgenes para que las etiquetas no se superpongan
plt.tight_layout()

# Muestra la gráfica
plt.show()

top_10_expensive_fruits = df.sort_values(by='RetailPriceFruits', ascending=False).head(10)

# Configura el tamaño de la gráfica
plt.figure(figsize=(12, 6))

# Usa Seaborn para una mejor visualización
sns.barplot(data=top_10_expensive_fruits, x='Fruit', y='RetailPriceFruits', palette='magma')

# Configura las etiquetas y el título de la gráfica
plt.xlabel('Fruta')
plt.ylabel('Precio al por menor')
plt.title('Top 10 frutas más caras')

# Rotar las etiquetas del eje x para que se vean mejor
plt.xticks(rotation=45, ha='right')

# Ajusta los márgenes para que las etiquetas no se superpongan
plt.tight_layout()

# Muestra la gráfica
plt.show()

plt.figure(figsize=(14, 7))

# Definir la posición de las barras
ind = np.arange(len(df))

# Ancho de las barras
width = 0.4

# Crear las barras para los vegetales
plt.bar(ind, df['RetailPriceVegetable'], width, label='Vegetales', color='green')

# Crear las barras para las frutas sobre las barras de vegetales
plt.bar(ind, df['RetailPriceFruits'], width, bottom=df['RetailPriceVegetable'], label='Frutas', color='orange')

# Configura las etiquetas de los ejes y el título
plt.xlabel('Índice')
plt.ylabel('Precio al por menor')
plt.title('Comparación de precios: Vegetales y Frutas')

# Colocar las etiquetas de los nombres en el eje x
plt.xticks(ind, df['Vegetable'], rotation=70, ha='right')

# Añadir una leyenda
plt.legend()

# Ajusta los márgenes para que las etiquetas no se superpongan
plt.tight_layout()

# Muestra la gráfica
plt.show()